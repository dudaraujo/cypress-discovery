Método e conteúdo são a mesma coisa. Porém, no JS é mais comum
chamar de função ;) 


DEV TOOLS

- Sources: Mostra todos os arquivos que foram carregados para renderizar a página
- Network - Mostra todos os downloads

To do JS que roda em aplicação web, é executado localmente no seu navegador

FAZENDO O JS RODAR EM UM SERVER HTTP EM VEZ DE NO NOSSO BROWSER
- Abrir CMD como admin
- npm install http-server -g
- O -g quer dizer para instalarmos global na máquina
- Entrar na pasta do projeto pelo CMD 
- http-server
- Esse comando vai ativar o software nede que baixamos e vai transformar a minha pasta atual em um servidor web localmente
- No navegador, entrar em localhost: numero da porta
- Ctrl C para parar o server

RODANDO O JS NO BACKEND UTILIZANDO A PLATAFORMA NODE JS
Criando API REST
- Na pasta do projeto digitar npm init e fazer as configs
- Baixar o EXPRESS (Framework para criar um servidor para rodar no backend (api rest))
- npm install express na pasta do projeto
- Colar código de get started do express em um arquivo de server
- Baixar o Thunder Cliente (Postman com Insominia embutido no vscode)
Extensão do vscode para trabalhar com teste e requisições, e consumir API's rest
diretamente no vscode
- npx nodemon server.js para quando subirmos o servidor ele recarregar sozinho a cada alteração

QUAL A MELHOR OPÇÃO NA HORA DE SELECIONAR O COMPONENTE DO CÓDIGO 
- Utilizar o Se
lector Playground não é uma boa abordagem pois ele pega conteúdos estáticos
- A melhor opção é sempre procurar o elemento que q contenha ID
e então, ir buscando os elemendos que estão dentro dele
- Isso garantirá uma maior acertividade na hora de validar textos, por exemplo. 
Exemplo: #page-home main h1 -> estou dizendo para buscar um item h1 que está dentro de main e dentro 
de um id chamado page-home
- elementos como esse: a[href="/deliver"] são até melhores que ID's 


HTML
- <span> recebe um ícone dentro do botão
- <a> ancora, tem o evento de clique
- quando buscamos ID, usamos #
- quando buscamps classes, usamos . 
- display: none é uma propriedade do CSS que faz com que o item fique invisível. 
- accept: quando estamos usando localizadores do html e utilzamso o accept podemos utilizar da seguinte forma:
localizador normal: input[accept="image/*"]
pedindo para encontrar um item que comece com image: input[accept^="image"]
pedindo para encontrar um item que termine com /*: input[accept$="/*"]
pedidno para encontrar um item que contém o texto image: input[accept*="image"]

CYPRESS
- A função contains nos permite juntar um localizador CSS com um texto.

- O arquivo Fixtures é onde guardamos a massa de teste estática no projeto

- Qualquer código que eu colocar dentro de e2e.js será executado antes de qualquer teste automatizado

FAZER UPLOAD DE ARQUIVOS USANDO O CYPRESS
- npm install cypress-file-upload --save-dev
- importar dentro de e2e.js com import 'cypress-file-upload'

-